{
  "compilerOptions": {
    // 目标代码(ts --> js(5/6/7...)) 后面会通过babel再进行转化
    "target": "esnext",
    // 目标代码需要使用的模块化方案
    // commonJs--require/module.exports
    // es module--import/export
    // 自己编写代码 一般写"umd"表示支持多种模块化
    "module": "esnext",
    // 开启严格模式
    "strict": true,
    // 是否对jsx做处理 preserve 保留 不处理
    "jsx": "preserve",
    // 辅助导入功能
    "importHelpers": true,
    // 按照node方式解析模块
    "moduleResolution": "node",
    // 跳过对一些库的类型检测
    "skipLibCheck": true,
    // export default/module.exports = {}
    // ex module 和 commonJs 混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 要不要生成映射文件（ts --> js）
    "sourceMap": true,
    // 文件路径在解析时 基本url 比如当前文件也加个./
    "baseUrl": ".",
    // 指定具体要解析使用的类型
    "types": ["webpack-env"],
    // 路径解析
    "paths": {
      "@/*": ["src/*"]
    },
    // 可以指定在项目中可以使用哪些库的类型
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },
  // 哪些代码需要解析
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx",
    "src/store/index.ts"  ],
    // 如果没有这个 当有文件用到node_modules中的文件时会把所有的都解析
  "exclude": ["node_modules"]
}
